"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteWebhostEnvConstruct = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
const path = require("path");
const cr = require("aws-cdk-lib/custom-resources");
const iam = require("aws-cdk-lib/aws-iam");
class WriteWebhostEnvConstruct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const writeEnvLambda = new lambda.Function(this, 'writeEnvLambda', {
            code: lambda.Code.fromAsset(path.join(__dirname, '/../../lambda/writeToS3')),
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: 'index.handler',
            memorySize: 256,
            timeout: cdk.Duration.seconds(60),
            functionName: 'writeEnvToS3Lambda',
            currentVersionOptions: {
                removalPolicy: cdk.RemovalPolicy.DESTROY,
                retryAttempts: 2,
            },
            environment: {
                BUCKET_NAME: props.bucket.bucketName,
                API_URL: props.apiGW.url,
            }
        });
        // grant permission to S3
        props.bucket.grantWrite(writeEnvLambda);
        // run lambda on create
        const lambdaTrigger = new cr.AwsCustomResource(this, 'writeEnvLambdaTrigger', {
            policy: cr.AwsCustomResourcePolicy.fromStatements([new iam.PolicyStatement({
                    actions: ['lambda:InvokeFunction'],
                    effect: iam.Effect.ALLOW,
                    resources: [writeEnvLambda.functionArn],
                })]),
            timeout: cdk.Duration.minutes(5),
            onCreate: {
                service: 'Lambda',
                action: 'invoke',
                parameters: {
                    FunctionName: writeEnvLambda.functionName,
                    InvocationType: 'Event',
                },
                physicalResourceId: cr.PhysicalResourceId.of('JobSenderTriggerPysicalId'),
            },
        });
    }
}
exports.WriteWebhostEnvConstruct = WriteWebhostEnvConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVXZWJob3N0RW52LWNvbnN0cnVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndyaXRlV2ViaG9zdEVudi1jb25zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLGlEQUFpRDtBQUNqRCwyQ0FBdUM7QUFDdkMsNkJBQTZCO0FBRzdCLG1EQUFtRDtBQUNuRCwyQ0FBMkM7QUFRM0MsTUFBYSx3QkFBeUIsU0FBUSxzQkFBUztJQUNuRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTJCO1FBQ2pFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUMvRCxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUJBQXlCLENBQUMsQ0FBQztZQUM1RSxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxZQUFZLEVBQUUsb0JBQW9CO1lBQ2xDLHFCQUFxQixFQUFFO2dCQUNuQixhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO2dCQUN4QyxhQUFhLEVBQUUsQ0FBQzthQUNuQjtZQUNELFdBQVcsRUFBRTtnQkFDVCxXQUFXLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVO2dCQUNwQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHO2FBQzNCO1NBQ0osQ0FBQyxDQUFDO1FBRUgseUJBQXlCO1FBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXhDLHVCQUF1QjtRQUN2QixNQUFNLGFBQWEsR0FBRyxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7WUFDMUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7b0JBQ3ZFLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO29CQUNsQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLO29CQUN4QixTQUFTLEVBQUUsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO2lCQUMxQyxDQUFDLENBQUMsQ0FBQztZQUNKLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDaEMsUUFBUSxFQUFFO2dCQUNOLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsVUFBVSxFQUFFO29CQUNSLFlBQVksRUFBRSxjQUFjLENBQUMsWUFBWTtvQkFDekMsY0FBYyxFQUFFLE9BQU87aUJBQzFCO2dCQUNELGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLENBQUM7YUFDNUU7U0FVSixDQUFDLENBQUE7SUFDTixDQUFDO0NBQ0o7QUFwREQsNERBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgKiBhcyBjbG91ZGZyb250IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZGZyb250JztcbmltcG9ydCAqIGFzIGNyIGZyb20gJ2F3cy1jZGstbGliL2N1c3RvbS1yZXNvdXJjZXMnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgYXBpR2F0ZXdheSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheSc7XG5cbmV4cG9ydCBpbnRlcmZhY2Ugd3JpdGVXZWJob3N0RW52UHJvcHMge1xuICAgIGJ1Y2tldDogczMuQnVja2V0LFxuICAgIGFwaUdXOiBhcGlHYXRld2F5LlJlc3RBcGksXG59XG5cbmV4cG9ydCBjbGFzcyBXcml0ZVdlYmhvc3RFbnZDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiB3cml0ZVdlYmhvc3RFbnZQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHdyaXRlRW52TGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnd3JpdGVFbnZMYW1iZGEnLCB7XG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJy8uLi8uLi9sYW1iZGEvd3JpdGVUb1MzJykpLFxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE2X1gsXG4gICAgICAgICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICAgICAgICBtZW1vcnlTaXplOiAyNTYsXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24uc2Vjb25kcyg2MCksXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6ICd3cml0ZUVudlRvUzNMYW1iZGEnLFxuICAgICAgICAgICAgY3VycmVudFZlcnNpb25PcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgICAgICAgICAgICByZXRyeUF0dGVtcHRzOiAyLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgQlVDS0VUX05BTUU6IHByb3BzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICAgICAgICAgIEFQSV9VUkw6IHByb3BzLmFwaUdXLnVybCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZ3JhbnQgcGVybWlzc2lvbiB0byBTM1xuICAgICAgICBwcm9wcy5idWNrZXQuZ3JhbnRXcml0ZSh3cml0ZUVudkxhbWJkYSk7XG5cbiAgICAgICAgLy8gcnVuIGxhbWJkYSBvbiBjcmVhdGVcbiAgICAgICAgY29uc3QgbGFtYmRhVHJpZ2dlciA9IG5ldyBjci5Bd3NDdXN0b21SZXNvdXJjZSh0aGlzLCAnd3JpdGVFbnZMYW1iZGFUcmlnZ2VyJywge1xuICAgICAgICAgICAgcG9saWN5OiBjci5Bd3NDdXN0b21SZXNvdXJjZVBvbGljeS5mcm9tU3RhdGVtZW50cyhbbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgICAgIGFjdGlvbnM6IFsnbGFtYmRhOkludm9rZUZ1bmN0aW9uJ10sXG4gICAgICAgICAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICAgICAgICAgIHJlc291cmNlczogW3dyaXRlRW52TGFtYmRhLmZ1bmN0aW9uQXJuXSxcbiAgICAgICAgICAgIH0pXSksXG4gICAgICAgICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24ubWludXRlcyg1KSxcbiAgICAgICAgICAgIG9uQ3JlYXRlOiB7XG4gICAgICAgICAgICAgICAgc2VydmljZTogJ0xhbWJkYScsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnaW52b2tlJyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIEZ1bmN0aW9uTmFtZTogd3JpdGVFbnZMYW1iZGEuZnVuY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICBJbnZvY2F0aW9uVHlwZTogJ0V2ZW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogY3IuUGh5c2ljYWxSZXNvdXJjZUlkLm9mKCdKb2JTZW5kZXJUcmlnZ2VyUHlzaWNhbElkJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gb25VcGRhdGU6IHtcbiAgICAgICAgICAgIC8vICAgICBzZXJ2aWNlOiAnTGFtYmRhJyxcbiAgICAgICAgICAgIC8vICAgICBhY3Rpb246ICdpbnZva2UnLFxuICAgICAgICAgICAgLy8gICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIC8vICAgICAgICAgRnVuY3Rpb25OYW1lOiB3cml0ZUVudkxhbWJkYS5mdW5jdGlvbk5hbWUsXG4gICAgICAgICAgICAvLyAgICAgICAgIEludm9jYXRpb25UeXBlOiAnRXZlbnQnLFxuICAgICAgICAgICAgLy8gICAgIH0sXG4gICAgICAgICAgICAvLyAgICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBjci5QaHlzaWNhbFJlc291cmNlSWQub2YoJ0pvYlNlbmRlclRyaWdnZXJQaHlzaWNhbElkJyksXG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICB9KVxuICAgIH1cbn0iXX0=