"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGWConstruct = void 0;
const apiGateway = require("aws-cdk-lib/aws-apigateway");
const constructs_1 = require("constructs");
const shared_1 = require("../../../config/shared");
const cdk = require("aws-cdk-lib");
class ApiGWConstruct extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Create api gateway
        this.apiGW = new apiGateway.RestApi(this, 'apiGateway', {
            description: 'apigateway for web app',
            restApiName: `${shared_1.CONSTANTS.PROJECT_NAME}-apiGateway`,
            // deployOptions: {
            //     stageName: 'prd',
            // },
            deploy: false,
            endpointTypes: [apiGateway.EndpointType.REGIONAL],
            defaultCorsPreflightOptions: {
                allowHeaders: [
                    'Content-Type',
                    'X-Amz-Date',
                    'Authorization',
                    'X-Api-Key',
                ],
                allowMethods: ['OPTIONS', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
                allowCredentials: true,
                // allowOrigins: [props.cfDomainName],
                allowOrigins: ['*'],
            }
        });
        // Authoirizer
        // const auth = new apigateway.CognitoUserPoolsAuthorizer(this, `${CONSTANTS.PROJECT_NAME}Authorizer`, {
        //     cognitoUserPools: [props.cognitoUserPool],
        // });
        // const webapps = this.apiGW.root.addResource('webapps');
        // webapps.addMethod('GET', new apigateway.HttpIntegration('http://amazon.com'), {
        //     authorizer: auth,
        //     authorizationType: apigateway.AuthorizationType.COGNITO,
        // });
        // output
        new cdk.CfnOutput(this, `${shared_1.CONSTANTS.PROJECT_NAME}-apiGw`, {
            exportName: `${shared_1.CONSTANTS.PROJECT_NAME}-apiGw`,
            value: this.apiGW.restApiId,
        });
        new cdk.CfnOutput(this, `${shared_1.CONSTANTS.PROJECT_NAME}-apiGw-root-id`, {
            exportName: `${shared_1.CONSTANTS.PROJECT_NAME}-apiGw-root-id`,
            value: this.apiGW.root.resourceId,
        });
    }
}
exports.ApiGWConstruct = ApiGWConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpZ2F0ZXdheS1jb25zdHJ1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcGlnYXRld2F5LWNvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5REFBeUQ7QUFDekQsMkNBQXVDO0FBQ3ZDLG1EQUFtRDtBQUNuRCxtQ0FBbUM7QUFVbkMsTUFBYSxjQUFlLFNBQVEsc0JBQVM7SUFJekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEwQjtRQUNoRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ3BELFdBQVcsRUFBRSx3QkFBd0I7WUFDckMsV0FBVyxFQUFFLEdBQUcsa0JBQVMsQ0FBQyxZQUFZLGFBQWE7WUFDbkQsbUJBQW1CO1lBQ25CLHdCQUF3QjtZQUN4QixLQUFLO1lBQ0wsTUFBTSxFQUFFLEtBQUs7WUFDYixhQUFhLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUNqRCwyQkFBMkIsRUFBRTtnQkFDekIsWUFBWSxFQUFFO29CQUNWLGNBQWM7b0JBQ2QsWUFBWTtvQkFDWixlQUFlO29CQUNmLFdBQVc7aUJBQ2Q7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUM7Z0JBQ2xFLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLHNDQUFzQztnQkFDdEMsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ3RCO1NBQ0osQ0FBQyxDQUFDO1FBRUgsY0FBYztRQUNkLHdHQUF3RztRQUN4RyxpREFBaUQ7UUFDakQsTUFBTTtRQUVOLDBEQUEwRDtRQUMxRCxrRkFBa0Y7UUFDbEYsd0JBQXdCO1FBQ3hCLCtEQUErRDtRQUMvRCxNQUFNO1FBRU4sU0FBUztRQUNULElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxrQkFBUyxDQUFDLFlBQVksUUFBUSxFQUFFO1lBQ3ZELFVBQVUsRUFBRSxHQUFHLGtCQUFTLENBQUMsWUFBWSxRQUFRO1lBQzdDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVM7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLGtCQUFTLENBQUMsWUFBWSxnQkFBZ0IsRUFBRTtZQUMvRCxVQUFVLEVBQUUsR0FBRyxrQkFBUyxDQUFDLFlBQVksZ0JBQWdCO1lBQ3JELEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVO1NBQ3BDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSjtBQXBERCx3Q0FvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcGlHYXRld2F5IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL3NoYXJlZCc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuLy8gaW1wb3J0ICogYXMgY29nbml0byBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29nbml0byc7XG5cbi8vIGRlY2xhcmUgY29uc3QgY2RrRGVtb1dlYjogYXBpZ2F0ZXdheS5SZXNvdXJjZTtcblxuZXhwb3J0IGludGVyZmFjZSBBcGlHV0NvbnN0cnVjdFByb3BzIHtcbiAgICAvLyBjb2duaXRvVXNlclBvb2w6IGNvZ25pdG8uVXNlclBvb2wsXG4gICAgY2ZEb21haW5OYW1lOiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjbGFzcyBBcGlHV0NvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG5cbiAgICBwdWJsaWMgYXBpR1c6IGFwaUdhdGV3YXkuUmVzdEFwaTtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBcGlHV0NvbnN0cnVjdFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFwaSBnYXRld2F5XG4gICAgICAgIHRoaXMuYXBpR1cgPSBuZXcgYXBpR2F0ZXdheS5SZXN0QXBpKHRoaXMsICdhcGlHYXRld2F5Jywge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdhcGlnYXRld2F5IGZvciB3ZWIgYXBwJyxcbiAgICAgICAgICAgIHJlc3RBcGlOYW1lOiBgJHtDT05TVEFOVFMuUFJPSkVDVF9OQU1FfS1hcGlHYXRld2F5YCxcbiAgICAgICAgICAgIC8vIGRlcGxveU9wdGlvbnM6IHtcbiAgICAgICAgICAgIC8vICAgICBzdGFnZU5hbWU6ICdwcmQnLFxuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIGRlcGxveTogZmFsc2UsXG4gICAgICAgICAgICBlbmRwb2ludFR5cGVzOiBbYXBpR2F0ZXdheS5FbmRwb2ludFR5cGUuUkVHSU9OQUxdLFxuICAgICAgICAgICAgZGVmYXVsdENvcnNQcmVmbGlnaHRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYWxsb3dIZWFkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnLFxuICAgICAgICAgICAgICAgICAgICAnWC1BbXotRGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgJ1gtQXBpLUtleScsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBhbGxvd01ldGhvZHM6IFsnT1BUSU9OUycsICdHRVQnLCAnUE9TVCcsICdQVVQnLCAnUEFUQ0gnLCAnREVMRVRFJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvLyBhbGxvd09yaWdpbnM6IFtwcm9wcy5jZkRvbWFpbk5hbWVdLFxuICAgICAgICAgICAgICAgIGFsbG93T3JpZ2luczogWycqJ10sXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQXV0aG9pcml6ZXJcbiAgICAgICAgLy8gY29uc3QgYXV0aCA9IG5ldyBhcGlnYXRld2F5LkNvZ25pdG9Vc2VyUG9vbHNBdXRob3JpemVyKHRoaXMsIGAke0NPTlNUQU5UUy5QUk9KRUNUX05BTUV9QXV0aG9yaXplcmAsIHtcbiAgICAgICAgLy8gICAgIGNvZ25pdG9Vc2VyUG9vbHM6IFtwcm9wcy5jb2duaXRvVXNlclBvb2xdLFxuICAgICAgICAvLyB9KTtcblxuICAgICAgICAvLyBjb25zdCB3ZWJhcHBzID0gdGhpcy5hcGlHVy5yb290LmFkZFJlc291cmNlKCd3ZWJhcHBzJyk7XG4gICAgICAgIC8vIHdlYmFwcHMuYWRkTWV0aG9kKCdHRVQnLCBuZXcgYXBpZ2F0ZXdheS5IdHRwSW50ZWdyYXRpb24oJ2h0dHA6Ly9hbWF6b24uY29tJyksIHtcbiAgICAgICAgLy8gICAgIGF1dGhvcml6ZXI6IGF1dGgsXG4gICAgICAgIC8vICAgICBhdXRob3JpemF0aW9uVHlwZTogYXBpZ2F0ZXdheS5BdXRob3JpemF0aW9uVHlwZS5DT0dOSVRPLFxuICAgICAgICAvLyB9KTtcblxuICAgICAgICAvLyBvdXRwdXRcbiAgICAgICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgYCR7Q09OU1RBTlRTLlBST0pFQ1RfTkFNRX0tYXBpR3dgLCB7XG4gICAgICAgICAgICBleHBvcnROYW1lOiBgJHtDT05TVEFOVFMuUFJPSkVDVF9OQU1FfS1hcGlHd2AsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5hcGlHVy5yZXN0QXBpSWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsIGAke0NPTlNUQU5UUy5QUk9KRUNUX05BTUV9LWFwaUd3LXJvb3QtaWRgLCB7XG4gICAgICAgICAgICBleHBvcnROYW1lOiBgJHtDT05TVEFOVFMuUFJPSkVDVF9OQU1FfS1hcGlHdy1yb290LWlkYCxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmFwaUdXLnJvb3QucmVzb3VyY2VJZCxcbiAgICAgICAgfSlcbiAgICB9XG59Il19