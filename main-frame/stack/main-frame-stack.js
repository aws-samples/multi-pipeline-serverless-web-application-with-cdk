"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainFrameStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const apigateway_construct_1 = require("../lib/infra-constructs/apigateway-construct/apigateway-construct");
const apigateway_rscMethod_1 = require("../lib/infra-constructs/apigateway-construct/apigateway-rscMethod");
// import { CognitoConstruct } from '../lib/constructs-infra/cognito-construct/cognito-construct';
const s3_webhost_construct_1 = require("../lib/infra-constructs/s3-webhost-construct/s3-webhost-construct");
const cdk = require("aws-cdk-lib");
const shared_1 = require("../config/shared");
const writeWebhostEnv_construct_1 = require("../lib/app-construct/writeWebhostEnv-construct");
class MainFrameStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const accountId = cdk.Stack.of(this).account; // or this.account
        // Making S3 Bucket for Web Hosting
        const s3Webhost = new s3_webhost_construct_1.S3WebhostConstruct(this, 'S3Webhost', {
            buckName: `${shared_1.CONSTANTS.PROJECT_NAME.toLowerCase()}-${accountId}`,
        });
        // const cognitoUserPools = new CognitoConstruct(this, 'CognitoUserPool',{});
        // Making API Gateway
        this.apiGwConstruct = new apigateway_construct_1.ApiGWConstruct(this, 'ApiGateway', {
            cfDomainName: s3Webhost.distribution.distributionDomainName,
        });
        // Resource and Method under API Gateway
        const apiRscMethod = new apigateway_rscMethod_1.ApiRscMethod(this, 'apiRdcMethod', {
            apiGW: this.apiGwConstruct.apiGW,
        });
        const writeWebhostEnvConstruct = new writeWebhostEnv_construct_1.WriteWebhostEnvConstruct(this, 'writeToS3', {
            bucket: s3Webhost.cDKDemoBucket,
            apiGW: this.apiGwConstruct.apiGW,
        });
    }
}
exports.MainFrameStack = MainFrameStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1mcmFtZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4tZnJhbWUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWdEO0FBRWhELDRHQUFtRztBQUNuRyw0R0FBaUc7QUFDakcsa0dBQWtHO0FBQ2xHLDRHQUF1RztBQUN2RyxtQ0FBbUM7QUFDbkMsNkNBQTZDO0FBQzdDLDhGQUEwRjtBQUUxRixNQUFhLGNBQWUsU0FBUSxtQkFBSztJQUd2QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQjtRQUVoRSxtQ0FBbUM7UUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSx5Q0FBa0IsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQzFELFFBQVEsRUFBRSxHQUFHLGtCQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLFNBQVMsRUFBRTtTQUNqRSxDQUFDLENBQUM7UUFFSCw2RUFBNkU7UUFFN0UscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxxQ0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDM0QsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsc0JBQXNCO1NBQzVELENBQUMsQ0FBQztRQUVILHdDQUF3QztRQUN4QyxNQUFNLFlBQVksR0FBRyxJQUFJLG1DQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMxRCxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLO1NBRWpDLENBQUMsQ0FBQztRQUVILE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxvREFBd0IsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQy9FLE1BQU0sRUFBRSxTQUFTLENBQUMsYUFBYTtZQUMvQixLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLO1NBQ2pDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQS9CRCx3Q0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjaywgU3RhY2tQcm9wcyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQXBpR1dDb25zdHJ1Y3QgfSBmcm9tICcuLi9saWIvaW5mcmEtY29uc3RydWN0cy9hcGlnYXRld2F5LWNvbnN0cnVjdC9hcGlnYXRld2F5LWNvbnN0cnVjdCc7XG5pbXBvcnQgeyBBcGlSc2NNZXRob2QgfSBmcm9tICcuLi9saWIvaW5mcmEtY29uc3RydWN0cy9hcGlnYXRld2F5LWNvbnN0cnVjdC9hcGlnYXRld2F5LXJzY01ldGhvZCc7XG4vLyBpbXBvcnQgeyBDb2duaXRvQ29uc3RydWN0IH0gZnJvbSAnLi4vbGliL2NvbnN0cnVjdHMtaW5mcmEvY29nbml0by1jb25zdHJ1Y3QvY29nbml0by1jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgUzNXZWJob3N0Q29uc3RydWN0IH0gZnJvbSAnLi4vbGliL2luZnJhLWNvbnN0cnVjdHMvczMtd2ViaG9zdC1jb25zdHJ1Y3QvczMtd2ViaG9zdC1jb25zdHJ1Y3QnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4uL2NvbmZpZy9zaGFyZWQnO1xuaW1wb3J0IHsgV3JpdGVXZWJob3N0RW52Q29uc3RydWN0IH0gZnJvbSAnLi4vbGliL2FwcC1jb25zdHJ1Y3Qvd3JpdGVXZWJob3N0RW52LWNvbnN0cnVjdCc7XG5cbmV4cG9ydCBjbGFzcyBNYWluRnJhbWVTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IGFwaUd3Q29uc3RydWN0OiBBcGlHV0NvbnN0cnVjdDtcbiAgXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgYWNjb3VudElkID0gY2RrLlN0YWNrLm9mKHRoaXMpLmFjY291bnQ7IC8vIG9yIHRoaXMuYWNjb3VudFxuXG4gICAgLy8gTWFraW5nIFMzIEJ1Y2tldCBmb3IgV2ViIEhvc3RpbmdcbiAgICBjb25zdCBzM1dlYmhvc3QgPSBuZXcgUzNXZWJob3N0Q29uc3RydWN0KHRoaXMsICdTM1dlYmhvc3QnLCB7XG4gICAgICBidWNrTmFtZTogYCR7Q09OU1RBTlRTLlBST0pFQ1RfTkFNRS50b0xvd2VyQ2FzZSgpfS0ke2FjY291bnRJZH1gLCAvLyBNb2RpZnkgd2l0aCB5b3VyIGJ1Y2tldE5hbWVcbiAgICB9KTtcblxuICAgIC8vIGNvbnN0IGNvZ25pdG9Vc2VyUG9vbHMgPSBuZXcgQ29nbml0b0NvbnN0cnVjdCh0aGlzLCAnQ29nbml0b1VzZXJQb29sJyx7fSk7XG5cbiAgICAvLyBNYWtpbmcgQVBJIEdhdGV3YXlcbiAgICB0aGlzLmFwaUd3Q29uc3RydWN0ID0gbmV3IEFwaUdXQ29uc3RydWN0KHRoaXMsICdBcGlHYXRld2F5Jywge1xuICAgICAgY2ZEb21haW5OYW1lOiBzM1dlYmhvc3QuZGlzdHJpYnV0aW9uLmRpc3RyaWJ1dGlvbkRvbWFpbk5hbWUsIC8vIGZvciBDT1JTXG4gICAgfSk7XG4gICAgXG4gICAgLy8gUmVzb3VyY2UgYW5kIE1ldGhvZCB1bmRlciBBUEkgR2F0ZXdheVxuICAgIGNvbnN0IGFwaVJzY01ldGhvZCA9IG5ldyBBcGlSc2NNZXRob2QodGhpcywgJ2FwaVJkY01ldGhvZCcsIHtcbiAgICAgIGFwaUdXOiB0aGlzLmFwaUd3Q29uc3RydWN0LmFwaUdXLFxuICAgICAgLy8gY29nbml0b1VzZXJQb29sOiBjb2duaXRvVXNlclBvb2xzLnVzZXJQb29sLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgd3JpdGVXZWJob3N0RW52Q29uc3RydWN0ID0gbmV3IFdyaXRlV2ViaG9zdEVudkNvbnN0cnVjdCh0aGlzLCAnd3JpdGVUb1MzJywge1xuICAgICAgYnVja2V0OiBzM1dlYmhvc3QuY0RLRGVtb0J1Y2tldCxcbiAgICAgIGFwaUdXOiB0aGlzLmFwaUd3Q29uc3RydWN0LmFwaUdXLFxuICAgIH0pO1xuICB9XG59XG4iXX0=